* Creando la app backend de NodeSend
  - Crear la carpeta 'backend' y ingresar a la carpeta
  - Inicializar la app
      # npm init
        > package name: nodesend-backend
        > version: (1.0.0)
        > descripcion: App NodeSend
        > entry point: (index.js)
        > text command: (ENTER, por default)
        > git repository: (ENTER, por default)
        > keywords: (ENTER, por default)
        > author: Adriano Ayala
        > license: (ISC)
        > Is this OK? (yes)

  - Instalar dependencias
    > Express
      # npm install express
    > Nodemon
      # npm install --save-dev nodemon
    > Mongoose y DotEnv
      # npm install mongoose dotenv
    > Bcrypt
      # npm install bcrypt
    > Express validator
     # npm install express-validator
    > Json Web Token
     # npm install jsonwebtoken
    > ShotId (Generar URL)
     # npm install shortid
    > Multer (Subir archivos)
     # npm install multer
    > Cors (Conexion entre backend y frontend)
     # npm install cors


  - Agregar 'scripts' de configuracion en 'package.json'

  - Ejecutar la App
    # npm run dev

  - Conectar MongoDB con la App
    + Iniciar session en https://www.mongodb.com/atlas
    + Database -> Data Services -> Clic "Build a Database"
    + Select 'FREE', dejar todo por defecto y clic 'Create'
    + Editamos el password a 'root123' y clic 'Finish and Close'
    + Ingresamos al cluster y clic 'Connect'
    + Connect to your application -> 'Drivers' y muestra las configuracion de coneccion a mongodb

  - Conectar MongoDB con MongoDB Compass (Interfaz grafica)
    + Abrir MongoDB Compass, insertar la URI: mongodb+srv://root:<password>cluster0.gpg5hmm.mongodb.net y clic en 'Connect'
    + Ir a 'Databases' y clic 'Create database'
      > Database Name: nodesend
      > Collection Name: usuarios
      > Clic 'Create Database'

  - Solicitudes Postman
    + POST
      > URL: http://localhost:4000/api/auth
        * Body -> raw
          {
            "email": "adriano@correo.com",
            "password": "adriano123"
          }
        * Clic "Send"
    + GET
      > URL: ttp://localhost:4000/api/auth
        * Authorization -> Type: "Bearer Token" (Si existe autorizacion con token)
          Token: <TOKEN_GENERADO>

  - Subir archivos Postman
    + POST
      > URL: http://localhost:4000/api/archivos
        * Body -> form-data
          Key: archivo    (Seleccionamos 'File')
          Value: <SELECCIONAR_ARCHIVO_A_SUBIR>
        * Clic "Send"


* Creando la app frontend de NodeSend
  - Ingresar dentro de la carpeta del proyecto
  - Crear la app
    # npx create-next-app frontend        // New version
      > Ok to proceed? (y): y
      > ? Would you like to use TypeScript? No/Yes: No
      > ? Would you like to use ESLint? No/Yes: Yes
      > ? Would you like to use Tailwind CSS? No/Yes: No
      > ? Would you like to use 'src/' directory? No/Yes: No
      > ? Would you like to use App Router? (recommended) No/Yes: Yes
      > ? Would you like to customize the default import alias (@/*)? No/Yes: No
    # cd frontent
    # npm run dev

    # npx create-next-app@12 frontend     // Old version
    # cd frontent
    # npm run dev

  - Instalar dependencias
    > Formik y Yup
      # npm install formik yup
    > Axios
      # npm install axios
    > React Dropzone
      # npm install react-dropzone


* Deploy de la App NodeSend
  + frontent -> Vercel
    - Ir al directorio de la app y ejecutar
      # npm run build
    - Instalar vercel
      # npm i -g vercel
    - Crear un cuenta y iniciar sesion en Vercel (URL: https://vercel.com/)
    - Iniciar session en CLI de Vercel
      # vc login
      > Ir al correo para su respectivo verificacion
    - Deploy a Vercel
      # vc
        ? Set up and deploy [Y/n] y
        ? Which scope do you want to deploy to? [ENTER]
        ? Link to existing proyect? [Y/n] n
        ? What's your project's name? [ENTER]
        ? In which directory is your code located? ./ [ENTER]
        ? Want to modify these settings? [y/N] n
          Inspect: URL (Copiar y pegar en el navegador para ver el estado del deploy) -> Boton 'Visit' (Para ver el sitio)
          Preview: URL (Copiar y pegar en el navegador para vel el sitio)
    - Modificar las URL's (Archivo: next.config.js)
      env: {
        backend: URL_HEROKU_DEPLOY (Click app -> click boton 'Open app' y copiar la URL)
        frontend: URL_VERCEL_DEPLOY (Click app -> Copiar la URL de deployment o click boton 'Visit' y copiar la URL)
      }
    - Ejecuar nuevamente el build y deploy a Vercel
      # npm run build
      # vc

  + Backend -> Heroku
    - Ir a GitHub, crear un nuevo repositorio y subir la app al repositorio
    - Heroku CLI (https://devcenter.heroku.com/articles/heroku-cli)
      # npm install -g heroku
    - Crear e iniciar sesion en Heroku (https://www.heroku.com/)
    - Inicar sesion en Heroku CLI
      # heroku login
    - Crea la app y enlazar el repositorio con la app de Heroku
      # heroku create --remote production
      # git push production master
    - Agregar las variables de configuracion
      -> Ir a dashboard -> Click en la app creada -> Seleccionamos 'Settings' -> Click en el boton 'Reveal Config Vars'
        KEY: DB_URL, VALUE: URL_MONGODB
        KEY: SECRETA, VALUE: PALABRA_SECRETA_FIRMA_SESION
        KEY: FRONTENT_URL, VALUE: FRONTENT_URL_VERCEL
    - Agregar un nuevo cambio en el repositorio
      # git add .
      # git commit -m "MENSAJE_COMMIT"
      # git push -u origin master
      # git push production master
